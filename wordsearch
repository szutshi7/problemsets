class Solution {
public:
    set<pair<int, int> > visitedIndexes;
    bool exist(vector<vector<char>>& board, string word) {
        if(board.size() == 0)
            return false;
        map<int, string> wordMap;
     //   for(int i =0; i < word.length(); i++)
  //      {
  //          wordMap[i] = word.substr(0,i+1);
  //      }
        int first = 0;
        for(int i = 0; i < board.size(); i++)
        {
            for(int j = 0; j < board[0].size(); j++)
            {
                if(board[i][j] == word[0])
                {
                    visitedIndexes.insert(pair<int, int>(i,j));
                    if(backtrackB(board, i, j, 1, word))
                       return true;
                    visitedIndexes.clear();
                }
            }
        }
        
        return false;
    }
    
    bool backtrackB(vector<vector<char>>& board, int i, int j, int idx, string word)
    {   
      if(idx == word.length())
          return true;
        
      pair<int, int> up = pair<int, int>(i-1,j);
      pair<int, int> down = pair<int, int>(i+1,j);
      pair<int, int> left = pair<int, int>(i,j-1);
      pair<int, int> right = pair<int, int>(i,j+1);
        
      if(i-1 >= 0 && visitedIndexes.find(up) == visitedIndexes.end() && 
         board[i-1][j] == word[idx])
      {
          visitedIndexes.insert(up);
          if(backtrackB(board, i-1, j, idx+1, word))
              return true;
          visitedIndexes.erase(up);
      }
      if(i+1 < board.size() && visitedIndexes.find(down) == visitedIndexes.end() && 
         board[i+1][j] == word[idx])
      {
          visitedIndexes.insert(down);
          if(backtrackB(board, i+1, j, idx+1, word))
              return true;
          visitedIndexes.erase(down);
      }
      if(j-1 >= 0 && visitedIndexes.find(left) == visitedIndexes.end() && 
         board[i][j-1] == word[idx])
      {
          visitedIndexes.insert(left);
          if(backtrackB(board, i, j-1, idx+1, word))
              return true;
          visitedIndexes.erase(left);
       }
      if(j+1 < board[0].size() && visitedIndexes.find(right) == visitedIndexes.end() &&
         board[i][j+1] == word[idx])
      {
          visitedIndexes.insert(right);
          if(backtrackB(board, i, j+1, idx+1, word))
              return true;
          visitedIndexes.erase(right);
      }
        
      return false;  
    }
};
